apply plugin: 'com.android.application'

def javaVersion = JavaVersion.VERSION_1_7
def backPath = file("${buildDir}/backApk")

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.example.fxb.tinkerdemo"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //生成Application时使用
    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}")
    annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}")
    //tinker的和核心库
    implementation("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}")


    implementation 'com.android.support:multidex:1.0.1'

}

ext{
    tinkerEnable = true
    tinkerOldApkPath = "${backPath}/"
    tinkerApplyMappingPath = "${backPath}/"
    tinkerApplyResourcePath = "${backPath}/"
    tinkerID = "1.0"
}

def buildWithTinker(){
    return ext.tinkerEnable
}
def getOldApkPath(){
    return ext.tinkerOldApkPath
}
def getApplyMappingPach(){
    return ext.tinkerApplyMappingPath
}
def getApplyResourcePath(){
    return ext.tinkerApplyResourcePath
}
def getTinkerIdValue(){
    return ext.tinkerID
}
if(buildWithTinker()){
    //启用tinker
    apply plugin: 'com.tencent.tinker.patch'   //相当于引入包名

    //所有tinker相关的参数配置
    tinkerPatch{

        oldApk = getOldApkPath() //指定old apk（上一个版本的apk）路径

        ignoreWarning = false   //不忽略tinker警告，有警告就终止patch的生成

        useSign = true      //强制patch文件也使用签名

        tinkerEnable = buildWithTinker() //指定是否启用tinker

        buildConfig{

            applyMapping = getApplyMappingPach() //指定old apk打包时所使用的的混淆文件

            applyResourceMapping = getApplyResourcePath()  //指定old apk的资源文件

            tinkerId = getTinkerIdValue()   //指定TinkerID

            keepDexApply = false  //实际开发中通常置为false
        }
        dex{

            dexMode = "jar"   //jar、  raw

            pattern = ["classes*.dex","assets/secondary-dex-?.jar"] //指定dex文件目录

            loader = ["com.example.fxb.tinkerdemo.MyTinkerApplication"] //指定加载patch文件时用到的类
        }
        lib{
            pattern = ["libs/*/*.so"]
        }
        res{
            pattern = ["res/*","assets/*","resources.arcs","AndroidManifest.xml"] //指定tinker可以修改的所有资源路径

            ignoreChange = ["assets/sample_meta.txt"] //指定不收影响的资源路径

            largeModSize = 100  //资源修改大小的默认值
        }

        packageConfig{
            configField("patchMessage","fix the 1.0 version's bugs")

            configField("patchVersion","1.0")
        }



    }
    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    //是否配置多渠道
    boolean hasFlavors = flavors.size() > 0
    def date = new Date().format("MMdd-HH-mm-ss")
    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath

                        if (variant.metaClass.hasProperty(variant, 'packageApplicationProvider')) {
                            def packageAndroidArtifact = variant.packageApplicationProvider.get()
                            if (packageAndroidArtifact != null) {
                                from new File(packageAndroidArtifact.outputDirectory, variant.outputs.first().apkData.outputFileName)
                            } else {
                                from variant.outputs.first().mainOutputFile.outputFile
                            }
                        } else {
                            from variant.outputs.first().outputFile
                        }

                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }

}